Master Branch(통합 브랜치) : 배포가능한 수준의 안정적인 소스를 저장하는 브런치
Develop Branch(토픽 브랜치) : 개발단계인 소스를 저장하는 브런치
Bug Fix Branch(토픽 브랜치) : 개발되었지만 버그를 고치는 중인 소스를 저장하는 브런치

통합 브랜치 : 배포가 가능한 수준의 브랜치로 일반적으로 마스터(Master)브랜치를 의미합니다.
토픽 브랜치 : 특정한 기능을 위해 만들어진 브랜치로 일반적으로 마스터(Master) 브랜치 이외의 다른 브랜치를 의미합니다.

그냥 "브런치"는 내 컴퓨터, 즉 로컬 네트워크에서 브런치를 말하는 것이고, "origin/브런치"는 원격네트워크(git hub)에서의 브런치를 말하는 것이다.

git 맨 처음 실행해야할 3줄
git config --global user.name "your_name"				--> git config --global user.name "Jiwon_Ryu"     git에 내 이름을 설정.(이 컴퓨터에만)
git config --global user.email "your_email"				--> git config --global user.email "awldnjs2@naver.com"		git에 내 이메일을 설정(이 컴퓨터에만)
git config --list							--> 위의 이름, 이메일 설정 후 잘 입력됐는지 확인

---------------------------------------------------git 명령어--------------------------------------------------
git --version							--> git 프로그램의 버전 정보 보여줌.

git init 								--> git 초기화

git config --global init.defaultBranch main				--> 기본 브랜치명 변경. master라는 브랜치를 main으로 변경하기 위해 많이 사용함.

git add .     							--> 모든 파일을 캡슐에 추가한다.
git add text.txt 							--> text.txt 파일만 캡슐에 추가한다.

git diff								--> 변경사항을 조금 더 구체적으로 보여주는 명령어

git status								--> 현재 상태를 볼 수 있다.

git commit -m "modify 인사말 [text.txt]" 				--> commit을 한다. 히스토리(스냅샷)을 만든다고 보면된다. 따옴표 안에 작업내역과 파일명을 붙이면 알아보기 쉽다. -m은 메세지를 추가하여 넣겠다는 뜻이다.
git commit -am "커밋메세지"						--> add와 함께 commit을 한다. 파일이 untracked되어있지 않아야 한다.

git log								--> 로그들을 보여준다. 로그들로 각 브런치가 어떤 것을 가리키고 있는지를 통해 연동이 되어있는지 없는지 알 수 있다.
git log --graph							--> 로그들을 보여주는데 그래프형태로 브런치가 어떻게 뻗어나가고 합쳐지는지를 보여준다.

#--------------------------------------- .gitignore 사용법 ---------------------------------------
# file.exe를 무시한다.
file.exe

# 최상위폴더의 file.exe를 무시한다.
/file.ex

# 모든 exe확장자파일을 무시한다.
*.exe

# 이 파일은 무시하지 않는다.
!file.exe

# logs란 이름의 파일 또는 폴더와 그 내용들을 무시한다.
logs

# logs란 이름의 폴더와 그 내용들을 무시한다.
logs/

# logs 폴더 바로 안의 debug.log와 .c 파일들을 무시한다.
logs/debug.log
logs/*.c

# logs 폴더 바로 안, 또는 그 안의 다른 폴드(들) 안의 debug.log를 무시한다. 즉. logs폴더 안의 모든 debug.log 파일이 무시된다.

-------------------------------------------------브런치 명령어----------------------------------------------------
git branch							--> 만들어진 브런치 리스트를 보여 줌.
git branch -a							--> remote branch를 포함하여 모든 branch들을 보여줌. - 개수 주의
git branch --all							--> remote branch를 포함하여 모든 branch들을 보여줌. - 개수 주의

git branch 브런치명						--> 내 브런치 생성만 함. 이동 X

git branch -d 브런처명						--> 브런치 삭제
git branch -D 브런치명						--> 브런치 강제삭제

git branch -m 기존브런치명 새브런치명				--> 기존브런치명을 새브런치명으로 변경.

git switch 브런치명							--> 브런치 이동. 원래는 git checkout 브런치명 이었는데 바뀜.

git switch -c 브런치명						--> 브런치 생성 및 이동. 원래는 git checkout -b 브런치명 이었는데 바뀜.

----------------------이전 스탭샷으로 되돌리는 두가지 명령어 reset, revert-------------------------------------
reset은 1,2,3,4 커밋이 있고 4번 커밋에 reset명령어를 사용하면 4번 커밋을 삭제하여 3번내역으로 돌아가버리는 방식이다.
2번 커밋에 reset을 실행하면 1번 커밋만 남고, 2,3,4 커밋은 모두 지워져버린다. 그리고 1번 커밋의 상태로 되돌아가 버린다.

revert 명령어를 사용하면 현재 커밋을 삭제하는게 아니라 이전 커밋으로 되돌린 후 그 되돌린 내역을 새로 저장시키는 방식이라서 로그가 쌓인다.
예를들어 1,2,3,4 커밋이 있으면 작업 도중 2번 커밋에 대한 변경내역을 되돌리고 싶으면 revert를 사용하여 4번까지 진행된 내역에 2번 커밋의 변경내역만 되돌린 후 5번커밋으로 만들 수 있다.

협업시에는 reset을 잘 사용하지 않는다. reset은 삭제기능이라서 협업시에 많은 충돌을 일으킬 수 있기 떄문이다.

reset 사용방법
1. git log를 쓴다.
2. 되돌리고 싶은 commit의 옆에 commit 해시번호를 복사한다. 앞에서부터 일부분만 복사해도 된다.
3. git reset --hard 해시번호 를 쓴다.
4. 되돌리고 싶었던 commit만 남고 그 이후의 commit은 전부 삭제된다.

revert  사용방법
1. git log를 쓴다.
2. 되돌리고 싶은 commit의 옆에 commit 해시번호를 복사한다. 앞에서부터 일부분만 복사해도 된다.
3. git revert 해시번호 를 쓴다.
4. 해당 해시번호의 commit의 메시지 앞에 revert가 붙은 commit이 생성되어 되돌려 진다.
Tip. git revert --no-commit 해시번호 를 쓰면 commit 되지 않은 상태로 되돌려 진다. 그냥 add 만 된 상태가 된다. commit을 직접 해줘야 한다.
이전 정보로 되돌리고는 싶은데 커밋하기는 싫을때, 즉, 스냅샷으로 남기기는 싫을 때 쓴다. 이 상태에서 수정을 하고 원할 때 커밋을 하면 된다.

---------------------------------------sourcetree사용법 4가지 배움--------------------------
1. add하는 방법 2. commit 하는방법 3.reset하는방법 4.revert하는 방법 5. 브랜치만드는 방법
6. 브랜치이동하는 방법 7. merge하는 방법 8. merge 도중 conflict 발생 시 해결 방법 9. rebase하는 방법



---------------------------------------branch 합치는 방법 2가지--------------------------
1. merge 명령어 사용 : merge는 각 뻗어나간 줄기들을 병합하는 것 	2. rebase 명령어 사용 : rebase는 뻗어나간 줄기들을 하나의 줄기에 이어 붙이는것.
--> 따라서 merge를 사용하면 여러 뻗어나간 줄기들이 복잡하게 구성될 수 있지만, rebase를 사용하면 줄기가 이어 붙어지기 때문에 깔끔하게 정리되어 보일 수 있다.
--> 브랜치의 사용내역을 남겨둘 필요가 있다면 merge를, 그보다 깔끔하게 히스토리를 정리하고 싶다면 rebase를 사용하면 된다.
--> 다만 이미 팀원들간에 공유된 commit들에 대해서는 Rebase를 사용하지 않는 것이 좋다. 
--> 왜냐하면 rebase는 뻗어나간 줄기를 없에다가 메인줄기에 붙이는 것인데, 히스토리는 수정내역을 저장하는 것이기 때문이다.
--> marge를 사용했다면 각 수정내역을 더하여 하나의 commit으로 만드는 것이지만, rebase는 하나의 줄기에 수정내역을 붙여버리기 때문에 중복 수정이 적용될 수 있다.

(1) merge로 합치는 방법
1) merge로 합칠 메인 브랜치로 이동	ex) develop와 main을 합치고 싶을 때 main으로 switch하기.
2) git merge 합칠브랜치명 입력	ex) git merge develop 입력
Tip1. merge로 합쳐진 것은 하나의 새로운 commit이다. 그래서 reset으로 merge한 커밋을 지우면 merge를 되돌리는 것이 가능하다.
Tip2. merge 충돌 해결 불가능 시) 너무 충돌이 많거나 하여 merge를 중단하고 싶다면 git merge --abort를 입력하면 merge가 중단된다.
Tip3. merge 충돌 해결 가능 시) 나면 텍스트를 선택 후 저장하고 git add 로 추가하고, :wq 입력해서 빠져나오면 merge가 되어 있다.
3) merge를 끝낸 브랜치는 git branch -d 브랜치명 으로 삭제해주면 된다.

(2) rebase로 합치는 방법		--> 명령어를 실행하는 브랜치가 merge와 반대이다. merge는 메인브랜치에서 합쳤다면, rebase는 서브브랜치에서 합친다.
1) rebase로 합쳐질 서브 브랜치로 이동 ex) develop 브랜치를 main 브랜치로 rebase하고 싶으면 develop브랜치로 switch하여 rebase 명령어를 실행해야한다.
2) git rebase 합칠브랜치명 입력	 ex) git rebase main입력.
Tip1. rebase 충돌 해결 불가능 시) git rebase --abort 입력
Tip2. rebase 충돌 해결 가능 시) git rebase --continue 입력 --> :wq 입력
rebase는 서브브런치의 각 커밋이 메인브랜치에 커밋마다 하나하나 옮겨붙여지는 것이기 때문에 rebase 명령 실행 후 각 커밋 생성마다 충돌이 발생할 수 있다.
그래서 충돌발생 시 충돌해결해줘야 할 것들이 조금 더 많다.
rebase도 마찬가지로 충돌된 텍스트를 해결해주고 저장한 다음 git add 를 해주고 git rebase --continue를 입력하면 된다.
3) git switch 메인브런치 로 이동하여서 마지막으로 git merge 서브브런치 를 입력한다
--> rebase를 하고 나면 서브브런치의 스냅샷 내역을 main 다음 스냅샷 내역으로 합친 것이 되는데, switch 및 merge를 하지 않고 그대로 작성을 이어나가면 서브브런치에 스냅샷이 계속
적용될 수 있기 때문이다. 그러니 메인브런치로 이동하고 merge를 하여 서브브런치를 아예 합치고, 서브브런치는 git branch -d 서브브런치명 으로 지워주면 된다. 

---------------------------------------remote 원격저장소 다루는 명령어--------------------------

git remote add 원격저장소이름 원격저장소주소				--> Github repository랑 내 로컬 프로젝트랑 연결.
ex) git remote add origin https://www.github.com/koreamarin/git-practice	--> url에 원격저장소와 연결되고, 원격저장소이름에 입력한 이름으로 이름이 정해진다.
								--> 원격저장소이름은 보통 origin으로 사용된다.(branch의 기본명이 main이듯 remote의 기본명이 main이다.)
								--> url은 github가 될수도, 소스코드를 관리하는 또 다른서버의 url이 될 수도 있다.
								--> 이 명령어를 입력하면 sourcetree에서 원격에 원격저장소가 추가된 것을 볼 수 있다.

git remote							--> 원격저장소의 리스트를 보여 줌.

git remote -v							--> 모든 연결된 원격저장소의 상태를 보여줌.

git remote 원격저장소명 url						--> 원격저장소를 만들고 url과 연결함. 처음에 생성되는 원격저장소의 이름은 origin이고, 그 이후 원격저장소를 만드는 것 임.

git remote rename 원격저장소명 바꿀원격저장소명			--> 원격저장소명을 바꿀원격저장소명으로 바꿔 줌.

git log 원격저장소명/브런치명					--> 해당 원격저장소의 해당 브런치에 대한 로그를 볼 수 있다.
ex) git log origin/master

git merge 원격저장소명/브런치명					--> 해당 원격저장소의 해당 브런치에 대한 정보를 가져와 합병할 수 있다.

git remote rm 원격저장소명						--> 해당 원격저장소를 삭제한다. git remote -v 를 해보면 삭제되어 더이상 나오지 않는다.

---------------------------------------remote 원격저장소에서 커밋들 주고 받을 때 쓰는 명령어--------------------------

git clone (원격저장소주소)						--> 현재 폴더에 원격네트워크의 프로젝트명으로 폴더가 생성되며 git hub(원격 네트워크)에 최신커밋이 적용되어 있는 파일들이 다운로드 된다.
ex) git clone https://github.com/koreamarin/git_practice			--> 즉, 현재 폴더에 원격네트워크에 올라가있는 프로젝트 파일들이 모두 다운로드된다. 커밋 로그까지 모두.

git push								--> 현재 브런치와 연결되어 있는 원격저장소/브런치로 커밋들을 보낸다.

git push -u (원격저장소명) (원격저장소브런치명)				--> 현재 로컬저장소와 원격저장소/원격브런치명를 연결한다.
								--> -u를 사용하면 로컬저장소와 원격저장소가 끊어지지 않고 계속 연결시켜져 있음.
								--> 앞으로는 git push만 입력하면 로컬저장소와 연결된 원격저장소로 push가 됨.
								--> pull도 마찬가지로 이미 원격저장소와 연결되어있기에 git pull만 입력하면 됨.
								--> 그리고 현재 로컬저장소에 있는 커밋들을 원격저장소/원격브런치로 보낸다.

git push 원격저장소명 브런치명					--> 현재 로컬저장소의 커밋들을 원격 네트워크의 브런치로 보낸다.

git pull								--> 현재 브런치에 연결되어 있는 원격저장소/브런치의 커밋내역들을 가져옴.

git pull 원격저장소명 브런치명					--> 해당 원격저장소/브런치에서 소스코드 가져오기. (pull을 사용하기 위해서는 현재 로컬의 소스코드들을 commit해놔야 함.)

Tip. 팀원이 먼저 원격저장소에 커밋내역을 올려놨다면 나는 그 최신커밋을 pull로 가져오기 전까지는 push를 할 수 없다.
		--> pull을 하지 않고 push를 해버리면 서로 내용이 공유되지 않은 채로 각자 자기만의 소스만을 올려버리는형태가 되어 협업이 되지 않기 때문이다.
		--> 따라서 최신내역을 가져와(pull) 최신 코드와 나의 코드에 맞게 재 코딩해야만 push하는 것이 가능하다.
		--> 이럴 때 나의 로컬에 있는 커밋과 원격저장소에 있는 커밋내역을 rebase 또는 merge를 해줘야 하는데 그 때 사용하는 명령어가 아래 2가지 이다.

		1. git pull --no-rebase	--> merge 방식 : 로컬과 원격의 서로 다른 커밋들을 병합시켜주는 방식.
			--> merge 방식 사용 도중 나의 커밋내역과 원격저장소에서 pull로 가져오는 커밋내역이 conflict를 일으킬 수 있다.
			--> branch를 merge할 때와 마찬가지로 충돌한 곳을 수정하고, git add .을 하고, git commit -m "message"을 하면 충돌이 해결되면서 병합이 완료된다.
	
		2. git pull --rebase		--> rebase 방식 : 원격 커밋에다가 로컬 커밋을 그 다음 커밋으로 붙이는 방식이다
			--> rebase 방식 사용 도중 나의 커밋내역과 원격저장소에서 pull로 가져오는 커밋내역이 conflict를 일으킬 수 있다.
			--> branch를 rebase할 때와 마찬가지로 충돌한 곳을 수정하고, git add .을 하고, git rebase --continue을 하면 충돌이 해결되면서 병합이 완료된다.

		--> 위 두 코드 중 한가지를 진행하고 git push를 하면 된다.  (사실 rebase는 왜 쓰는지 모르겠다.)

Tip. 원격에 있는 커밋이 잘못되어서 원격에 있는 커밋들을 pull하지 않고 로컬에 있는 커밋들을 원격으로 강제로 push해야하는 상황이 있다.
		--> 현재 local의 커밋을 remote에 강제로 넣기 위해서는 아래 코드를 쓰면 된다.
		--> git push --force

---------------------------------------remote branch 관련 명령어--------------------------
1. 로컬에서 branch를 만들어서 원격에 branch를 내보내어 보기.
 1) git branch "branch name"을 통해 branch를 만들어서 git push를 하면 remote branch를 만들 수 있다.
	git branch -a							--> remote branch를 포함하여 모든 branch들을 보여줌. - 개수 주의
	git branch --all							--> remote branch를 포함하여 모든 branch들을 보여줌. - 개수 주의

2. remote branch를 local branch로 받아오기.	--> 팀원이 원격브랜치를 만들어 놓을 수 있다. 그 원격브랜치를 받아오는 방법을 알아보자.
	1) git fetch	입력						--> git branch -a를 했을 때, local branch에 remote branch가 없을 때 remote branch를 local git에서 새로 인식시키는 명령어이다.
	2) git switch -t (remote name/remote branch name)			--> remote branch name과 같은 이름의 branch를 local에 생성하고 switch하여 브랜치 변경을 함.
	   ex) git switch -t origin/develop 					--> 그리고 만들어진 local branch와 remote branch를 서로 연결해 놓음. git push -u 명령어와 비슷한 기능임.

git push (remote name) --delete (remote branch name)				--> 원격의 브런치 삭제
ex) git push origin --delete develop


-----------------------------------sourcetree로 원격저장소 다루는 방법 배움-----------------------
1. sourcetree로 내 로컬에 원격저장소 추가하는 방법 
  1) sourcetree - 상단탭 - 저장소 - 원격저장소 추가 클릭
  2) 새로뜨는 창에서 '추가'클릭
  3) 원격이름에 원격저장소이름 (origin 등)을 적고, URL / 경로에 원격저장소URL(https://github.com/koreamarin/git-another-practice.git 등)을 적고 확인을 누른다.

2. sourcetree로 Push 하는 방법 1
  1) sourcetree 상단에 push를 누르고 '다음 저장소에 푸시'오른쪽에 있는 상자를 선택하여 push할 원격저장소를 고른다.
  2) push할 로컬저장소에 체크박스를 체크하고, push할 remote branch를 선택한다.
  2) 오른쪽 하단 push를 눌러준다.

3. sourcetree로 push하는 방법 2
  1) 변경사항을 sourcetree에서 커밋할 때 맨 하단에 "원격저장소/원격저장소브런치"에 바뀐 내용 즉시 푸시 에 체크하고 커밋하면 로컬에 커밋과 동시에 원격저장소에도 커밋된다.

4. sourcetree에서 fetch하는 방법
  1) 그냥 sourcetree 상단에 패치 누르고, 모든 원격 저장소에서 가져오기만 체크한 후 확인 누르면 된다.

5. sourcetree에서 pull하는 방법
  1) sourcetree 상단에 pull을 누른다.
  2) "충돌이 없으면 묶어서 바로 커밋"을 체크한다.
  3) "병합 대신 재배치" 체크박스는 원격저장소와 로컬저장소간의 commit 내역이 다를 시 merge를 할 지, 재배치를 할 지 선택하는 체크박스이다.
  4) 선택 후 Pull을 누른다.

6. sourcetree에서 branch다루는 방법.
  1) sourcetree 상단에 브랜치 버튼을 누른다.
  2) 창이 뜨면 새 브런치 라인에디터에 브랜치명을 적고 브랜치생성을 누른다..

7. 원격에만 있고 내 로컬에 없는 브랜치를 가져오는 방법
  1) sourcetree 상단 fetch를 누른다.
  2) 왼쪽 원격에 없던 remote branch가 생기면 오른쪽 클릭하여 "체크아웃 remote_name/remote_branch_name"을 누른다.
  3) 새 창이 뜨면 새 로컬 브랜치명에 브랜치명이 똑같이 입력되는데 브랜치명을 바꿔도 좋고, 그냥 확인을 눌러서 원격 브랜치와 똑같은 브랜치명의 로컬 브랜치를 만들어도 된다.


