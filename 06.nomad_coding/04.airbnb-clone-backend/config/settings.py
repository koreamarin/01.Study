"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os, environ

env = environ.Env() #   .env파일을 읽어서 환경변수를 설정한다.

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

environ.Env.read_env(os.path.join(BASE_DIR, ".env"))     # .env파일을 읽어서 환경변수를 설정한다.

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")      # .env파일에서 SECRET_KEY를 읽어온다.

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["192.168.0.201", "127.0.0.1"]


# Application definition
THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework.authtoken",     # rest_framework의 인증방식중 하나인 TokenAuthentication을 사용하기 위해 추가해준다.
]

CUSTOM_APPS = [
    "users.apps.UsersConfig",
    "rooms.apps.RoomsConfig",
    "common.apps.CommonConfig",
    "experiences.apps.ExperiencesConfig",
    "categories.apps.CategoriesConfig",
    "reviews.apps.ReviewsConfig",
    "wishlists.apps.WishlistsConfig",
    "bookings.apps.BookingsConfig",
    "medias.apps.MediasConfig",
    "direct_messages.apps.DirectMessagesConfig",
]

SYSTEM_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

INSTALLED_APPS = SYSTEM_APPS + THIRD_PARTY_APPS + CUSTOM_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# AUTH : 커스텀한 유저모델을 사용하기 위해서믄 따로 APP.AUTH_USER_MODEL을 지정해줘야한다.
AUTH_USER_MODEL = "users.User"

# 이미지나 파일등을 업로드할때 저장되는 경로를 지정해준다.
# 장고 내에 uploads라는 폴더를 만들고 그 안에 업로드된 파일이 저장된다.
# 클라이언트가 이미지를 요청할때에도 장고는 이 경로에서 이미지를 찾는다.
MEDIA_ROOT = "uploads"

# 이미지를 어떤 url로 접근하여 이미지를 로드할 것인지 url을 지정해준다.
# config/urls.py에 MEDIA_URL을 추가해줘야한다.
# ex) http://127.0.0.1:8000/user-uploads/room.jpg 에서 이미지 찾기 가능
MEDIA_URL = "user-uploads/"

# 페이지사이즈를 정하는 변수
PAGE_SIZE = 5




# REST_FRAMEWORK : rest_framework의 기본설정을 변경하기 위한 변수
# 장고는 view를 실행하기 전에 인증을 먼저 확인한다.
# DEFAULT_AUTHENTICATION_CLASSES에 있는 첫번째 인덱스부터 인증을 시도하며 인증에 성공하면 다음 인덱스로 넘어가지 않고,
# 인증에 실패하면 다음 인덱스로 넘어간다.

# 장고는 user를 인증하는 방식으로 총 4가지를 제공한다.
# 첫번째는 BasicAuthentication으로, 사용자가 username과 password를 입력하면 장고는 이를 base64로 인코딩하여
# Authorization헤더에 담아서 서버로 보낸다. 서버는 이를 디코딩하여 username과 password를 확인한다. 
# 이 기본인증방식은 잘 사용되지 않는다. 왜냐하면 base64로 인코딩된 값은 디코딩을 하면 원래의 값이 나오기 때문이다.

# 두번째는 SessionAuthentication으로, 사용자가 로그인을 하면 장고는 사용자의 세션을 생성한다. 이 세션은 장고의
# 기본적인 인증방식이다. 사용자가 로그인을 하면 장고는 사용자의 세션을 생성하고, 이 세션은 장고의 기본적인 인증방식이다.
# 사용자가 로그인을 하면 장고는 사용자의 세션을 생성하고, 이 세션은 장고의 기본적인 인증방식이다.

# 세번째는 TokenAuthentication이다.
# 네번째는 RemoteUserAuthentication이다.
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [                             # 인증방식을 지정한다.
        # 기본인증방식을 사용한다. 사용자가 입력한 username과 password를 base64로 인코딩하여 Authorization헤더에 담아서 서버로 보낸다.
        # 서버는 이를 디코딩하여 username과 password를 확인한다. 로그인을 위한 팝업창이 나타난다.
        # "rest_framework.authentication.BasicAuthentication",        
        "rest_framework.authentication.SessionAuthentication",      # 세션, 쿠피 인증을 사용한다.

        "config.authentication.TrustMeBroAuthentication",           # 커스텀한 인증방식을 사용한다.

        "rest_framework.authentication.TokenAuthentication",        # auth-token 인증을 사용한다.

        "config.authentication.JWTAuthentication",                  # JWT 인증을 사용한다. 커스텀한 인증방식을 만든 파일에서 JWT인증 클래스를 만들어 사용하였다.

    ]
}